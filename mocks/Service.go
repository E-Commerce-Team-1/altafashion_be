// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "altafashion_be/feature/users/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Deactivate provides a mock function with given fields: c
func (_m *Service) Deactivate(c echo.Context) (domain.Core, error) {
	ret := _m.Called(c)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(echo.Context) domain.Core); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthorized provides a mock function with given fields: c
func (_m *Service) IsAuthorized(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: existUser
func (_m *Service) Login(existUser domain.Core) (domain.Core, string, error) {
	ret := _m.Called(existUser)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Core); ok {
		r0 = rf(existUser)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(domain.Core) string); ok {
		r1 = rf(existUser)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(domain.Core) error); ok {
		r2 = rf(existUser)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MyProfile provides a mock function with given fields: c
func (_m *Service) MyProfile(c echo.Context) (domain.Core, error) {
	ret := _m.Called(c)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(echo.Context) domain.Core); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *Service) Register(newUser domain.Core) (domain.Core, error) {
	ret := _m.Called(newUser)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core) domain.Core); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Core) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowByEmail provides a mock function with given fields: Email
func (_m *Service) ShowByEmail(Email string) (domain.Core, error) {
	ret := _m.Called(Email)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(string) domain.Core); ok {
		r0 = rf(Email)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(Email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: updateData, c
func (_m *Service) UpdateProfile(updateData domain.Core, c echo.Context) (domain.Core, error) {
	ret := _m.Called(updateData, c)

	var r0 domain.Core
	if rf, ok := ret.Get(0).(func(domain.Core, echo.Context) domain.Core); ok {
		r0 = rf(updateData, c)
	} else {
		r0 = ret.Get(0).(domain.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Core, echo.Context) error); ok {
		r1 = rf(updateData, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
